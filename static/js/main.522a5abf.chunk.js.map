{"version":3,"sources":["components/Header.js","components/Keg.js","components/KegList.js","components/NewKegForm.js","components/KegDetail.js","components/KegControl.js","components/App.js","serviceWorker.js","index.js"],"names":["Header","Keg","props","Fragment","onClick","whenKegClicked","id","brand","name","parseInt","price","toFixed","alcoholContent","pints","KegList","kegList","map","keg","key","onKegSelection","NewKegForm","Form","onSubmit","event","preventDefault","onNewKegCreation","target","value","v4","FormControl","type","placeholder","min","step","Button","KegDetail","handleClickingSellPint","newPints","onClickingSellPint","KegControl","handleClick","state","selectedKeg","setState","formVisibleOnPage","prevState","handleAddingNewKegToList","newKeg","newMasterKegList","masterKegList","concat","handleChangingSelectedKeg","filter","handlePintDecrement","decrementedPintKeg","currentlyVisibleState","buttonText","this","React","Component","App","Container","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.522a5abf.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Header() {\r\n  return (\r\n    <h1>Tap Room</h1>\r\n  );\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction Keg(props) {\r\n  return (\r\n    <React.Fragment>\r\n      <div onClick={() => props.whenKegClicked(props.id)}>\r\n        <h3>{props.brand} - {props.name}</h3>\r\n        <p>Price: ${parseInt(props.price).toFixed(2)}</p>\r\n        <p>ABV: {props.alcoholContent}</p>\r\n        <p>Pints remaining: {props.pints}</p>\r\n        <hr />\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nKeg.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  brand: PropTypes.string.isRequired,\r\n  price: PropTypes.number.isRequired,\r\n  alcoholContent: PropTypes.number.isRequired,\r\n  pints: PropTypes.number,\r\n  id: PropTypes.string,\r\n  whenKegClicked: PropTypes.func\r\n};\r\n\r\nexport default Keg;","import React from 'react';\r\nimport Keg from './Keg';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction KegList(props) {\r\n  return (\r\n    <React.Fragment>\r\n      <hr />\r\n      {props.kegList.map((keg) => \r\n      <Keg\r\n        name={keg.name}\r\n        brand={keg.brand}\r\n        price={keg.price}\r\n        alcoholContent={keg.alcoholContent}\r\n        pints={keg.pints}\r\n        id={keg.id}\r\n        key={keg.id} \r\n        whenKegClicked={props.onKegSelection}/>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nKegList.propTypes = {\r\n  kegList: PropTypes.array,\r\n  onKegSelection: PropTypes.func\r\n};\r\n\r\nexport default KegList;","import React from 'react';\r\nimport { v4 } from 'uuid';\r\nimport PropTypes from 'prop-types';\r\nimport Button from 'react-bootstrap/Button'\r\nimport Form from 'react-bootstrap/Form';\r\nimport FormControl from 'react-bootstrap/FormControl';\r\n\r\nfunction NewKegForm(props) {\r\n\r\n  function handleNewKegFormSubmission(event) {\r\n    event.preventDefault();\r\n    props.onNewKegCreation({\r\n      name: event.target.name.value,\r\n      brand: event.target.brand.value,\r\n      price: event.target.price.value,\r\n      alcoholContent: event.target.alcoholContent.value,\r\n      pints: 124,\r\n      id: v4()\r\n    });\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Form onSubmit={handleNewKegFormSubmission}>\r\n        <FormControl \r\n          type='text'\r\n          name='name'\r\n          placeholder='Name' />\r\n          <FormControl \r\n          type='text'\r\n          name='brand'\r\n          placeholder='Brand' />\r\n          <FormControl \r\n          type='number'\r\n          name='price'\r\n          min='0'\r\n          step='0.01'\r\n          placeholder='Price per pint' />\r\n          <FormControl \r\n          type='number'\r\n          name='alcoholContent'\r\n          step='0.1'\r\n          min='0'\r\n          placeholder='ABV' />\r\n          <Button type='submit'>Submit</Button>\r\n      </Form>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nNewKegForm.propTypes = {\r\n  onNewKegCreation: PropTypes.func\r\n};\r\n\r\nexport default NewKegForm;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nfunction KegDetail(props) {\r\n  const { keg } = props;\r\n\r\n\r\n  function handleClickingSellPint() {\r\n    const newPints = keg.pints - 1;\r\n    props.onClickingSellPint({ name: keg.name, \r\n                            brand: keg.brand, \r\n                            price: keg.price, \r\n                            alcoholContent: keg.alcoholContent,\r\n                            pints: newPints,\r\n                            id: keg.id\r\n                            });\r\n  }\r\n  \r\n  function displayButtonControl() {\r\n    if (keg.pints > 0) {\r\n      return (<Button onClick={handleClickingSellPint}>Sell Pint</Button>);\r\n    } else {\r\n      return (<p>Out of stock!</p>);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <h1>Keg Detail</h1>\r\n      <h3>{keg.brand} - {keg.name}</h3>\r\n      <p>Price: ${parseInt(keg.price).toFixed(2)}</p>\r\n      <p>ABV: {keg.alcoholContent}</p>\r\n      <p>Pints remaining: {keg.pints}</p>\r\n      {displayButtonControl()}\r\n      <hr />\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nKegDetail.propTypes = {\r\n  keg: PropTypes.object,\r\n  onClickingSellPint: PropTypes.func\r\n}\r\n\r\nexport default KegDetail;","import React from 'react';\r\nimport KegList from './KegList';\r\nimport NewKegForm from './NewKegForm';\r\nimport KegDetail from './KegDetail';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nclass KegControl extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      masterKegList: [],\r\n      formVisibleOnPage: false,\r\n      selectedKeg: null\r\n    };\r\n  }\r\n\r\n  handleClick = () => {\r\n    if (this.state.selectedKeg != null) {\r\n      this.setState({\r\n        formVisibleOnPage: false,\r\n        selectedKeg: null\r\n      });\r\n    } else {\r\n      this.setState(prevState => ({\r\n      formVisibleOnPage: !prevState.formVisibleOnPage\r\n      }));\r\n    } \r\n  }\r\n\r\n  handleAddingNewKegToList = (newKeg) => {\r\n    const newMasterKegList = this.state.masterKegList.concat(newKeg);\r\n    this.setState({masterKegList: newMasterKegList,\r\n                  formVisibleOnPage: false });\r\n  }\r\n\r\n  handleChangingSelectedKeg = (id) => {\r\n    const selectedKeg = this.state.masterKegList.filter(keg => keg.id === id)[0];\r\n    this.setState({selectedKeg: selectedKeg});\r\n  }\r\n\r\n  handlePintDecrement = (decrementedPintKeg) => {\r\n    const newMasterKegList = this.state.masterKegList\r\n      .filter(keg => keg.id !== this.state.selectedKeg.id)\r\n      .concat(decrementedPintKeg);\r\n    this.setState({\r\n      masterKegList: newMasterKegList,\r\n      selectedKeg: null\r\n    });\r\n  }\r\n\r\n  render() {\r\n    let currentlyVisibleState = null;\r\n    let buttonText = null;\r\n\r\n    if (this.state.selectedKeg != null) {\r\n      currentlyVisibleState = <KegDetail keg={this.state.selectedKeg} onClickingSellPint={this.handlePintDecrement} />\r\n      buttonText = \"Return to Ticket List\";\r\n    } else if(this.state.formVisibleOnPage) {    \r\n      currentlyVisibleState = <NewKegForm onNewKegCreation={this.handleAddingNewKegToList} />;\r\n      buttonText = \"Return to Keg List\";\r\n    } else {\r\n        currentlyVisibleState = <KegList kegList={this.state.masterKegList} onKegSelection={this.handleChangingSelectedKeg} />\r\n        buttonText = \"Add Keg\";\r\n    }\r\n    return (\r\n      <React.Fragment>\r\n        {currentlyVisibleState}\r\n        <Button onClick={this.handleClick}>{buttonText}</Button>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default KegControl;","import React from 'react';\nimport Header from './Header';\nimport KegControl from './KegControl';\n\nimport Container from 'react-bootstrap/Container';\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <Container>\n        <Header />\n        <KegControl />\n      </Container>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}